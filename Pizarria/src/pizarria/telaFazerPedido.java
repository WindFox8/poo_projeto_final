/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pizarria;

import java.util.HashSet;
import java.util.List;
import javax.swing.JOptionPane;
import static pizarria.BancoDadosSabores.*;
import pizarria.Pedido.Estado;

/**
 *
 * @author joaow
 */
public class telaFazerPedido extends javax.swing.JFrame {

    /**
     * Creates new form telaFazerPedido
     */
    public telaFazerPedido() {
        initComponents();
    }

    private Cliente clienteEscolhido;
    private TableModelPizzas TabelaModelPizzas = new TableModelPizzas();
    private Pizza pizzaSelecionada;
    private int linhaClicadaParaRemoção;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoBotao = new javax.swing.ButtonGroup();
        btnSair = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        boxForma = new javax.swing.JComboBox<>();
        btnArea = new javax.swing.JRadioButton();
        btnDimensao = new javax.swing.JRadioButton();
        txtAreaDimensao = new javax.swing.JTextField();
        boxSabor1 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        boxSabor2 = new javax.swing.JComboBox<>();
        btnAdicionar = new javax.swing.JButton();
        labelValorTotal = new javax.swing.JLabel();
        labelId = new javax.swing.JLabel();
        labelCliente = new javax.swing.JLabel();
        boxTipos1 = new javax.swing.JComboBox<>();
        boxTipos2 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        boxStatus = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePizzas = new javax.swing.JTable();
        btnCalcular = new javax.swing.JButton();
        btnRemover = new javax.swing.JButton();
        labelMax = new javax.swing.JLabel();
        labelMin = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        btnSair.setText("Sair");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("FORMA:");

        boxForma.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"---== ==---" }));
        boxForma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxFormaActionPerformed(evt);
            }
        });

        grupoBotao.add(btnArea);
        btnArea.setText("Área");

        grupoBotao.add(btnDimensao);
        btnDimensao.setText("Dimensão");

        boxSabor1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("SABOR 1");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("SABOR 2");

        boxSabor2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {  }));
        boxSabor2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxSabor2ActionPerformed(evt);
            }
        });

        btnAdicionar.setText("Adicionar");
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });

        labelValorTotal.setText("VALOR TOTAL");

        labelId.setText("idPedido:");

        labelCliente.setText("CLIENTE");

        boxTipos1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        boxTipos1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxTipos1ActionPerformed(evt);
            }
        });

        boxTipos2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nenhum"}));
        boxTipos2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxTipos2ActionPerformed(evt);
            }
        });

        jLabel1.setText("STATUS:");

        boxStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { }));
        boxStatus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                boxStatusItemStateChanged(evt);
            }
        });
        boxStatus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boxStatusMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                boxStatusMousePressed(evt);
            }
        });
        boxStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxStatusActionPerformed(evt);
            }
        });
        boxStatus.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                boxStatusPropertyChange(evt);
            }
        });

        tablePizzas.setModel(TabelaModelPizzas);
        tablePizzas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablePizzasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablePizzas);

        btnCalcular.setText("Calcular");
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });

        btnRemover.setText("Remover");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        labelMax.setText("Max");

        labelMin.setText("Min");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(boxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(15, 15, 15))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(boxSabor1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(boxSabor2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelMax)
                                .addGap(68, 68, 68)
                                .addComponent(labelMin))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(131, 131, 131)
                                .addComponent(jLabel5))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(boxTipos1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(boxTipos2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(boxForma, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDimensao)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addComponent(btnRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(btnAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnArea)
                            .addComponent(jLabel2)
                            .addComponent(txtAreaDimensao, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelId, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelCliente))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(127, 127, 127)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(labelValorTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnCalcular, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelId)
                            .addComponent(labelCliente)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(boxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(boxForma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnArea)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDimensao)
                        .addGap(18, 18, 18)
                        .addComponent(txtAreaDimensao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelMax)
                            .addComponent(labelMin))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(boxTipos2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(boxTipos1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(boxSabor1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(boxSabor2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addComponent(btnCalcular)
                        .addGap(18, 18, 18)
                        .addComponent(labelValorTotal)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRemover)
                            .addComponent(btnAdicionar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addComponent(btnSair))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        // sair desta tela        
        this.dispose();
    }//GEN-LAST:event_btnSairActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        //popular combo boxes e inicializar id do pedido e tabela dos pedidos
        String[] formas = {"Quadrada", "Circular", "Triangular"};
        String[] tiposPizzas = {"Simples", "Especial", "Premium"};
        String[] status = {"ABERTO", "CAMINHO", "ENTREGUE"};
        Cliente c = clienteEscolhido;
        //popular formas
        for (String tipos : formas) {
            boxForma.addItem(tipos);
        }
        //popular pizzas
        for (String pizzas : tiposPizzas) {
            boxTipos1.addItem(pizzas);
            boxTipos2.addItem(pizzas);
        }
        // popular a box
        Estado estadoAtual = c.getPedido().getEstado();
        for (String estado : status) {
            boxStatus.addItem(estado);
        }

        for (int i = 0; i < boxStatus.getItemCount(); i++) {
            if (boxStatus.getItemAt(i).equals(estadoAtual.name())) {
                boxStatus.setSelectedIndex(i);
                break;
            }
        }

        //setar a box de acordo com o estado do pedido do cliente
        //vai usar o ID do cliente apenas porque um cliente tem um pedido por vez
        labelId.setText("ID do Pedido: " + c.getId());
        labelCliente.setText("CLIENTE:" + c.getNome());

        //popular tabela de pizzas do pedido
        this.TabelaModelPizzas.setListaPizzas(c.Pedido.getListPizza());


    }//GEN-LAST:event_formComponentShown

    private void boxTipos1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxTipos1ActionPerformed
        // Mudar sabores de acordo com o filtro selecionado
        Object itemSelecionado = boxTipos1.getSelectedItem();
        String texto = itemSelecionado + "";

        switch (texto) {
            case "Simples":
                //fazer mostrar lista so de simples
                boxSabor1.removeAllItems();
                List<Sabor> saboresSimples = getSaboresSimples();
                for (Sabor sabor : saboresSimples) {
                    boxSabor1.addItem(sabor.getSabor());
                }
                break;
            case "Especial":
                boxSabor1.removeAllItems();
                List<Sabor> saboresEspecial = getSaboresEspeciais();
                for (Sabor sabor : saboresEspecial) {
                    boxSabor1.addItem(sabor.getSabor());
                }
                //mostar lista de especial
                break;
            case "Premium":
                //mostra lista preimum
                boxSabor1.removeAllItems();
                List<Sabor> saboresPremium = getSaboresPremium();
                for (Sabor sabor : saboresPremium) {
                    boxSabor1.addItem(sabor.getSabor());
                }
                break;
        }
    }//GEN-LAST:event_boxTipos1ActionPerformed

    private void boxTipos2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxTipos2ActionPerformed
        // Mudar sabores de acordo com o filtro selecioando
        Object itemSelecionado = boxTipos2.getSelectedItem();
        String texto = itemSelecionado + "";

        switch (texto) {
            case "Simples":
                //fazer mostrar lista so de simples
                boxSabor2.removeAllItems();
                List<Sabor> saboresSimples = getSaboresSimples();
                for (Sabor sabor : saboresSimples) {
                    boxSabor2.addItem(sabor.getSabor());
                }
                break;
            case "Especial":
                //mostar lista de especial
                boxSabor2.removeAllItems();
                List<Sabor> saboresEspecial = getSaboresEspeciais();
                for (Sabor sabor : saboresEspecial) {
                    boxSabor2.addItem(sabor.getSabor());
                }
                break;
            case "Premium":
                //mostra lista preimum
                boxSabor2.removeAllItems();
                List<Sabor> saboresPremium = getSaboresPremium();
                for (Sabor sabor : saboresPremium) {
                    boxSabor2.addItem(sabor.getSabor());
                }
                break;
            case "Nenhum":
                boxSabor2.removeAllItems();
                break;
            default:
            //não mostrar nada
            }
    }//GEN-LAST:event_boxTipos2ActionPerformed

    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed
        //calcular o valor da pizza e criar booleano para obrigar a calcular o valor antes de adicionar
        //sera quase uma replica do botao de casdatrar mas ao inves de cadastrar, vai apenas mostrar o valor da pizza
        boolean calculado = false;
        String formaSelecionada = boxForma.getSelectedItem() + "";
        String tipo1 = boxTipos1.getSelectedItem() + "";
        String tipo2 = boxTipos2.getSelectedItem() + "";
        String forma = boxForma.getSelectedItem() + "";
        String sValor = txtAreaDimensao.getText();

        double dimensao = 0;
        try {
            dimensao = Double.parseDouble(sValor);
            Cliente c = this.clienteEscolhido;

            int indexSabor1 = boxSabor1.getSelectedIndex();
            int indexTipo1 = boxTipos1.getSelectedIndex();
            int indexSabor2 = boxSabor2.getSelectedIndex();
            int indexTipo2 = boxTipos2.getSelectedIndex() - 1;
            System.out.println(indexTipo2);

            Sabor sabor1 = sabores.get(indexTipo1).get(indexSabor1);
            Sabor sabor2 = indexTipo2 != -1 ? sabores.get(indexTipo2).get(indexSabor2) : null;

            Pizza pizza = null;

            switch (forma) {
                case "Quadrada":
                    if (dimensao >= 10 && dimensao <= 40) {
                        if (btnArea.isSelected()) {
                            pizza = indexTipo2 != -1 ? new PizzaQuadrada(dimensao, sabor1, sabor2, true) : new PizzaQuadrada(dimensao, sabor1, true);

                        } else if (btnDimensao.isSelected()) {
                            pizza = indexTipo2 != -1 ? new PizzaQuadrada(dimensao, sabor1, sabor2) : new PizzaQuadrada(dimensao, sabor1);
                        } else {
                            JOptionPane.showMessageDialog(null, "SELECIONE AREA OU DIMENSAO.\n", "AREA OU DIMENSAO", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "INSIRA UM VALOR DENTRO DO PERMITIDO.\n", "VALOR NÃO PERMITIDO", JOptionPane.INFORMATION_MESSAGE);
                    }
                    break;

                case "Circular":
                    if (dimensao >= 7 && dimensao <= 23) {
                        if (btnArea.isSelected()) {
                            pizza = indexTipo2 != -1 ? new PizzaRedonda(dimensao, sabor1, sabor2, true) : new PizzaRedonda(dimensao, sabor1, true);
                        } else if (btnDimensao.isSelected()) {
                            pizza = indexTipo2 != -1 ? new PizzaRedonda(dimensao, sabor1, sabor2) : new PizzaRedonda(dimensao, sabor1);
                        } else {
                            JOptionPane.showMessageDialog(null, "SELECIONE AREA OU DIMENSAO.\n", "AREA OU DIMENSAO", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "INSIRA UM VALOR DENTRO DO PERMITIDO.\n", "VALOR NÃO PERMITIDO", JOptionPane.INFORMATION_MESSAGE);
                    }
                    break;

                case "Triangular":
                    if (dimensao >= 20 && dimensao <= 60) {
                        if (btnArea.isSelected()) {
                            pizza = indexTipo2 != -1 ? new PizzaTriangular(dimensao, sabor1, sabor2, true) : new PizzaTriangular(dimensao, sabor1, true);
                        } else if (btnDimensao.isSelected()) {
                            pizza = indexTipo2 != -1 ? new PizzaTriangular(dimensao, sabor1, sabor2) : new PizzaTriangular(dimensao, sabor1);
                        } else {
                            JOptionPane.showMessageDialog(null, "SELECIONE AREA OU DIMENSAO.\n", "AREA OU DIMENSAO", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "INSIRA UM VALOR DENTRO DO PERMITIDO.\n", "VALOR NÃO PERMITIDO", JOptionPane.INFORMATION_MESSAGE);
                    }
                    break;

                default:
                    JOptionPane.showMessageDialog(null, "SELECIONE UM FORMATO.\n", "SELECIONE FORMATO", JOptionPane.INFORMATION_MESSAGE);
            }
            double valorTotal = pizza.getValor();
            String pizzaValorTotal = String.format("%.2f", valorTotal);
            labelValorTotal.setText("R$: " + pizzaValorTotal);

        } catch (java.lang.NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Insira um valor válido numérico.\n", "VALOR VÁLIDO", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnCalcularActionPerformed

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        // TODO add your handling code here:
        // Inserir pizza no pedido
        //pegar todos os valores que pizza precisa

        String tipo1 = boxTipos1.getSelectedItem() + "";
        String tipo2 = boxTipos2.getSelectedItem() + "";
        String forma = boxForma.getSelectedItem() + "";
        String sValor = txtAreaDimensao.getText();

        String Sabor2 = boxSabor2.getSelectedItem() + ""; // apenas para validação se tem dois sabores ou nao

        //valorDimensaoArea da pizza
        double dimensao = 0;
        try {
            dimensao = Double.parseDouble(sValor);
            Cliente c = this.clienteEscolhido;

            int indexSabor1 = boxSabor1.getSelectedIndex();
            int indexTipo1 = boxTipos1.getSelectedIndex();
            int indexSabor2 = boxSabor2.getSelectedIndex();
            int indexTipo2 = boxTipos2.getSelectedIndex() - 1;

            Sabor sabor1 = sabores.get(indexTipo1).get(indexSabor1);
            Sabor sabor2 = indexTipo2 != -1 ? sabores.get(indexTipo2).get(indexSabor2) : null;

            Pizza pizza = null;

            switch (forma) {
                case "Quadrada":
                    if (dimensao >= 10 && dimensao <= 40) {
                        if (btnArea.isSelected()) {
                            pizza = indexTipo2 != -1 ? new PizzaQuadrada(dimensao, sabor1, sabor2, true) : new PizzaQuadrada(dimensao, sabor1, true);

                        } else if (btnDimensao.isSelected()) {
                            pizza = indexTipo2 != -1 ? new PizzaQuadrada(dimensao, sabor1, sabor2) : new PizzaQuadrada(dimensao, sabor1);
                        } else {
                            JOptionPane.showMessageDialog(null, "SELECIONE AREA OU DIMENSAO.\n", "AREA OU DIMENSAO", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "INSIRA UM VALOR DENTRO DO PERMITIDO.\n", "VALOR NÃO PERMITIDO", JOptionPane.INFORMATION_MESSAGE);
                    }
                    break;

                case "Circular":
                    if (dimensao >= 7 && dimensao <= 23) {
                        if (btnArea.isSelected()) {
                            pizza = indexTipo2 != -1 ? new PizzaRedonda(dimensao, sabor1, sabor2, true) : new PizzaQuadrada(dimensao, sabor1, true);
                        } else if (btnDimensao.isSelected()) {
                            pizza = indexTipo2 != -1 ? new PizzaRedonda(dimensao, sabor1, sabor2) : new PizzaQuadrada(dimensao, sabor1);
                        } else {
                            JOptionPane.showMessageDialog(null, "SELECIONE AREA OU DIMENSAO.\n", "AREA OU DIMENSAO", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "INSIRA UM VALOR DENTRO DO PERMITIDO.\n", "VALOR NÃO PERMITIDO", JOptionPane.INFORMATION_MESSAGE);
                    }
                    break;

                case "Triangular":
                    if (dimensao >= 20 && dimensao <= 60) {
                        if (btnArea.isSelected()) {
                            pizza = indexTipo2 != -1 ? new PizzaTriangular(dimensao, sabor1, sabor2, true) : new PizzaQuadrada(dimensao, sabor1, true);
                        } else if (btnDimensao.isSelected()) {
                            pizza = indexTipo2 != -1 ? new PizzaTriangular(dimensao, sabor1, sabor2) : new PizzaQuadrada(dimensao, sabor1);
                        } else {
                            JOptionPane.showMessageDialog(null, "SELECIONE AREA OU DIMENSAO.\n", "AREA OU DIMENSAO", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "INSIRA UM VALOR DENTRO DO PERMITIDO.\n", "VALOR NÃO PERMITIDO", JOptionPane.INFORMATION_MESSAGE);
                    }
                    break;

                default:
                    JOptionPane.showMessageDialog(null, "SELECIONE UM FORMATO.\n", "SELECIONE FORMATO", JOptionPane.INFORMATION_MESSAGE);
            }

            c.Pedido.addPizza(pizza);
            this.TabelaModelPizzas.setListaPizzas(c.Pedido.getListPizza());

        } catch (java.lang.NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Insira um valor válido numérico.\n", "VALOR VÁLIDO", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        //remover pizza selecionada
        if (this.pizzaSelecionada != null) {
            Cliente c = this.clienteEscolhido;
            c.Pedido.getListPizza().remove(this.linhaClicadaParaRemoção);
            this.TabelaModelPizzas.setListaPizzas(c.Pedido.getListPizza());
        } else {
            JOptionPane.showMessageDialog(null, "SELECIONE UMA PIZZA PRIMEIRO.\n", "SELECIONE PIZZA", JOptionPane.INFORMATION_MESSAGE);

        }


    }//GEN-LAST:event_btnRemoverActionPerformed

    private void tablePizzasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePizzasMouseClicked
        //selecionar pizza clicada para remoção
        this.linhaClicadaParaRemoção = this.tablePizzas.rowAtPoint(evt.getPoint());
        Pizza p = this.TabelaModelPizzas.getPizza(linhaClicadaParaRemoção);
        this.pizzaSelecionada = p;

    }//GEN-LAST:event_tablePizzasMouseClicked

    private void boxStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxStatusActionPerformed
        // TODO add your handling code here:
        // setar estado do pedido

        Cliente c = this.clienteEscolhido;

        String statusBox = boxStatus.getSelectedItem().toString().trim();

        if (statusBox.equals("ABERTO")) {
            c.Pedido.setEstado(Estado.ABERTO);
        } else if (statusBox.equals("CAMINHO")) {
            c.Pedido.setEstado(Estado.CAMINHO);
        } else if (statusBox.equals("ENTREGUE")) {
            c.Pedido.setEstado(Estado.ENTREGUE);
        } else {
            System.out.println("ERRO: Status não reconhecido");
        }

    }//GEN-LAST:event_boxStatusActionPerformed

    private void boxStatusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boxStatusMouseClicked

    }//GEN-LAST:event_boxStatusMouseClicked

    private void boxStatusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_boxStatusItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_boxStatusItemStateChanged

    private void boxStatusMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boxStatusMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_boxStatusMousePressed

    private void boxStatusPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_boxStatusPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_boxStatusPropertyChange

    private void boxFormaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxFormaActionPerformed
        // trocar valores de Max e Min
        String forma = boxForma.getSelectedItem() + "";
        switch (forma) {
            case ("Quadrada"):
                labelMax.setText("Máx: 40cm");
                labelMin.setText("Mín: 10cm");
                break;
            case ("Circular"):
                labelMax.setText("Máx: 23cm");
                labelMin.setText("Mín: 7cm");
                break;
            case ("Triangular"):
                labelMax.setText("Máx: 20cm");
                labelMin.setText("Mín: 60cm");
                break;
        }

    }//GEN-LAST:event_boxFormaActionPerformed

    private void boxSabor2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxSabor2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_boxSabor2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(telaFazerPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(telaFazerPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(telaFazerPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(telaFazerPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new telaFazerPedido().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxForma;
    private javax.swing.JComboBox<String> boxSabor1;
    private javax.swing.JComboBox<String> boxSabor2;
    private javax.swing.JComboBox<String> boxStatus;
    private javax.swing.JComboBox<String> boxTipos1;
    private javax.swing.JComboBox<String> boxTipos2;
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JRadioButton btnArea;
    private javax.swing.JButton btnCalcular;
    private javax.swing.JRadioButton btnDimensao;
    private javax.swing.JButton btnRemover;
    private javax.swing.JButton btnSair;
    private javax.swing.ButtonGroup grupoBotao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelCliente;
    private javax.swing.JLabel labelId;
    private javax.swing.JLabel labelMax;
    private javax.swing.JLabel labelMin;
    private javax.swing.JLabel labelValorTotal;
    private javax.swing.JTable tablePizzas;
    private javax.swing.JTextField txtAreaDimensao;
    // End of variables declaration//GEN-END:variables

    void setCliente(Cliente c) {
        this.clienteEscolhido = c;
    }
}
