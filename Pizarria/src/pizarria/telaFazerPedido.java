/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pizarria;

import java.util.HashSet;
import javax.swing.JOptionPane;
import static pizarria.BancoDadosSabores.*;

/**
 *
 * @author joaow
 */
public class telaFazerPedido extends javax.swing.JFrame {

    /**
     * Creates new form telaFazerPedido
     */
    public telaFazerPedido() {
        initComponents();
    }

    private Cliente clienteEscolhido;
    private TableModelPizzas TabelaModelPizzas = new TableModelPizzas();
    private Pizza pizzaSelecionada;
    private int linhaClicadaParaRemoção;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoBotao = new javax.swing.ButtonGroup();
        btnSair = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        boxForma = new javax.swing.JComboBox<>();
        btnArea = new javax.swing.JRadioButton();
        btnDimensao = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        txtAreaDimensao = new javax.swing.JTextField();
        boxSabor1 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        boxSabor2 = new javax.swing.JComboBox<>();
        btnAdicionar = new javax.swing.JButton();
        labelValorTotal = new javax.swing.JLabel();
        labelId = new javax.swing.JLabel();
        labelCliente = new javax.swing.JLabel();
        boxTipos1 = new javax.swing.JComboBox<>();
        boxTipos2 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        boxStatus = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePizzas = new javax.swing.JTable();
        btnCalcular = new javax.swing.JButton();
        btnRemover = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        btnSair.setText("Sair");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("FORMA:");

        boxForma.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"---== ==---" }));

        grupoBotao.add(btnArea);
        btnArea.setText("Área");

        grupoBotao.add(btnDimensao);
        btnDimensao.setText("Dimensão");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        boxSabor1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("SABOR 1");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("SABOR 2");

        boxSabor2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {  }));

        btnAdicionar.setText("Adicionar");
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });

        labelValorTotal.setText("VALOR TOTAL");

        labelId.setText("idPedido:");

        labelCliente.setText("CLIENTE");

        boxTipos1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        boxTipos1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxTipos1ActionPerformed(evt);
            }
        });

        boxTipos2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nenhum"}));
        boxTipos2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxTipos2ActionPerformed(evt);
            }
        });

        jLabel1.setText("STATUS:");

        boxStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { }));

        tablePizzas.setModel(TabelaModelPizzas);
        tablePizzas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablePizzasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablePizzas);

        btnCalcular.setText("Calcular");
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });

        btnRemover.setText("Remover");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(boxSabor1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(boxTipos1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(34, 700, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(boxTipos2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(boxSabor2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelId)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelCliente))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(labelValorTotal)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtAreaDimensao, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel3)
                                                .addGap(120, 120, 120)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnSair)
                                            .addComponent(jLabel2))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 242, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(boxForma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnRemover))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(btnDimensao)
                                                    .addComponent(btnArea))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnAdicionar))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(btnCalcular)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(boxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addGap(12, 12, 12)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelId)
                            .addComponent(labelCliente))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(boxForma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(boxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(7, 7, 7))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btnRemover)
                                .addGap(18, 18, 18)))
                        .addComponent(jLabel3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(btnArea)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDimensao))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(btnAdicionar)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAreaDimensao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(boxTipos1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(boxTipos2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(boxSabor1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(boxSabor2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                        .addComponent(btnCalcular)
                        .addGap(18, 18, 18)
                        .addComponent(labelValorTotal)
                        .addGap(38, 38, 38)))
                .addComponent(btnSair)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        // sair desta tela
        this.dispose();
    }//GEN-LAST:event_btnSairActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        //popular combo boxes e inicializar id do pedido e tabela dos pedidos
        String[] formas = {"Quadrada", "Circular", "Triangular"};
        String[] tiposPizzas = {"Simples", "Especial", "Premium"};
        String[] status = {"Aberto", "À Caminho", "Entregue"};
        Cliente c = clienteEscolhido;

        for (String tipos : formas) {
            boxForma.addItem(tipos);
        }

        for (String pizzas : tiposPizzas) {
            boxTipos1.addItem(pizzas);
            boxTipos2.addItem(pizzas);
        }

        for (String estado : status) {
            boxStatus.addItem(estado);
        }
        //vai usar o ID do cliente apenas porque um cliente tem um pedido por vez
        labelId.setText("ID do Pedido: " + c.getId());
        labelCliente.setText("CLIENTE:" + c.getNome());

        this.TabelaModelPizzas.setListaPizzas(c.Pedido.getListPizza());


    }//GEN-LAST:event_formComponentShown

    private void boxTipos1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxTipos1ActionPerformed
        // Mudar sabores de acordo com o filtro selecionado
        Object itemSelecionado = boxTipos1.getSelectedItem();
        String texto = itemSelecionado + "";

        switch (texto) {
            case "Simples":
                //fazer mostrar lista so de simples
                boxSabor1.removeAllItems();
                for (SaborSimples sabor : saboresSimples) {
                    boxSabor1.addItem(sabor.getSabor());
                }
                break;
            case "Especial":
                boxSabor1.removeAllItems();
                for (Sabor sabor : saboresEspecial) {
                    boxSabor1.addItem(sabor.getSabor());
                }
                //mostar lista de especial
                break;
            case "Premium":
                //mostra lista preimum
                boxSabor1.removeAllItems();
                for (Sabor sabor : saboresPremium) {
                    boxSabor1.addItem(sabor.getSabor());
                }
                break;
        }
    }//GEN-LAST:event_boxTipos1ActionPerformed

    private void boxTipos2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxTipos2ActionPerformed
        // Mudar sabores de acordo com o filtro selecioando
        Object itemSelecionado = boxTipos2.getSelectedItem();
        String texto = itemSelecionado + "";

        switch (texto) {
            case "Simples":
                //fazer mostrar lista so de simples
                boxSabor2.removeAllItems();
                for (SaborSimples sabor : saboresSimples) {
                    boxSabor2.addItem(sabor.getSabor());
                }
                break;
            case "Especial":
                //mostar lista de especial
                boxSabor2.removeAllItems();
                for (Sabor sabor : saboresEspecial) {
                    boxSabor2.addItem(sabor.getSabor());
                }
                break;
            case "Premium":
                //mostra lista preimum
                boxSabor2.removeAllItems();
                for (Sabor sabor : saboresPremium) {
                    boxSabor2.addItem(sabor.getSabor());
                }
                break;
            case "Nenhum":
                boxSabor2.removeAllItems();
                break;
            default:
            //não mostrar nada
            }
    }//GEN-LAST:event_boxTipos2ActionPerformed

    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed
        //calcular o valor da pizza e criar booleano para obrigar a calcular o valor antes de adicionar
        //sera quase uma replica do botao de casdatrar mas ao inves de cadastrar, vai apenas mostrar o valor da pizza
        boolean calculado = false;
        String formaSelecionada = boxForma.getSelectedItem() + "";
        String tipo1 = boxTipos1.getSelectedItem() + "";
        String tipo2 = boxTipos2.getSelectedItem() + "";
        String forma = boxForma.getSelectedItem() + "";
        String sValor = txtAreaDimensao.getText();

        // apenas para validação se tem dois sabores ou nao
        String Sabor2 = boxSabor2.getSelectedItem() + "";
        boolean nTemSabor2;
        String saber2sabor = boxSabor2.getSelectedItem() + "";
        if (boxSabor2.getSelectedItem() == null) {
            nTemSabor2 = true;
        } else {
            nTemSabor2 = false;
        }

        double valor = 0;
        try {
            valor = Double.parseDouble(sValor);
        } catch (java.lang.NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Insira um valor numérico válido.\n", "VALOR VÁLIDO", JOptionPane.INFORMATION_MESSAGE);
        }

        switch (formaSelecionada) {
            case "Quadrada":
                if (btnArea.isSelected()) {
                    //calcula com base na área
                    //nao tiver 2 sabores
                    if (nTemSabor2) {
                        //cria um sabor temporario para poder colocar dentro da pizza (Sabor sabor1)
                        Sabor sabor1 = new SaborSimples(boxSabor1.getSelectedItem() + "");
                        PizzaQuadrada pizza = new PizzaQuadrada(valor, sabor1, true);

                    } else {
                        //tem 2 sabores
                        //cria um sabor temporario para poder colocar dentro da pizza (Sabor sabor1 e Sabor sabor2)
                        Sabor sabor1 = new SaborSimples(boxSabor1.getSelectedItem() + "");
                        Sabor sabor2 = new SaborSimples(boxSabor2.getSelectedItem() + "");
                        PizzaQuadrada pizza = new PizzaQuadrada(valor, sabor1, sabor2, true);

                    }
                } else if (btnDimensao.isSelected()) {
                    //calcula com base na dimensão
                    if (nTemSabor2) {
                        //cria um sabor temporario para poder colocar dentro da pizza (Sabor sabor1)
                        Sabor sabor1 = new SaborSimples(boxSabor1.getSelectedItem() + "");
                        PizzaQuadrada pizza = new PizzaQuadrada(valor, sabor1);

                    } else {
                        //tem 2 sabores
                        //cria um sabor temporario para poder colocar dentro da pizza (Sr sabor1 e Sabor sabor2)
                        Sabor sabor1 = new SaborSimples(boxSabor1.getSelectedItem() + "");
                        Sabor sabor2 = new SaborSimples(boxSabor2.getSelectedItem() + "");
                        PizzaQuadrada pizza = new PizzaQuadrada(valor, sabor1, sabor2);

                    }
                } else {
                    System.out.println("DEU ERRO NA PIZZA QUADRADA");
                }
                break;
            case "Circular":
                if (btnArea.isSelected()) {
                    //calcula com base na área
                    if (nTemSabor2) {
                        //cria um sabor temporario para poder colocar dentro da pizza (Sabor sabor1)
                        Sabor sabor1 = new SaborSimples(boxSabor1.getSelectedItem() + "");
                        PizzaRedonda pizza = new PizzaRedonda(valor, sabor1, true);

                    } else {
                        //tem 2 sabores
                        //cria um sabor temporario para poder colocar dentro da pizza (Sabor sabor1 e Sabor sabor2)
                        Sabor sabor1 = new SaborSimples(boxSabor1.getSelectedItem() + "");
                        Sabor sabor2 = new SaborSimples(boxSabor2.getSelectedItem() + "");
                        PizzaRedonda pizza = new PizzaRedonda(valor, sabor1, sabor2, true);

                    }
                } else if (btnDimensao.isSelected()) {
                    //calcula com base na dimensão
                    if (nTemSabor2) {
                        //cria um sabor temporario para poder colocar dentro da pizza (Sabor sabor1)
                        Sabor sabor1 = new SaborSimples(boxSabor1.getSelectedItem() + "");
                        PizzaRedonda pizza = new PizzaRedonda(valor, sabor1);

                    } else {
                        //tem 2 sabores
                        //cria um sabor temporario para poder colocar dentro da pizza (Sabor sabor1 e Sabor sabor2)
                        Sabor sabor1 = new SaborSimples(boxSabor1.getSelectedItem() + "");
                        Sabor sabor2 = new SaborSimples(boxSabor2.getSelectedItem() + "");
                        PizzaRedonda pizza = new PizzaRedonda(valor, sabor1, sabor2);

                    }
                } else {
                    System.out.println("DEU ERRO NA PIZZA CIRCULAR");
                }
                break;
            case "Triangular":
                if (btnArea.isSelected()) {
                    //calcula com base na área
                    if (nTemSabor2) {
                        //cria um sabor temporario para poder colocar dentro da pizza (Sabor sabor1)
                        Sabor sabor1 = new SaborSimples(boxSabor1.getSelectedItem() + "");
                        PizzaTriangular pizza = new PizzaTriangular(valor, sabor1, true);
                    } else {
                        //tem 2 sabores
                        //cria um sabor temporario para poder colocar dentro da pizza (Sabor sabor1 e Sabor sabor2)
                        Sabor sabor1 = new SaborSimples(boxSabor1.getSelectedItem() + "");
                        Sabor sabor2 = new SaborSimples(boxSabor2.getSelectedItem() + "");
                        PizzaTriangular pizza = new PizzaTriangular(valor, sabor1, sabor2, true);

                    }
                } else if (btnDimensao.isSelected()) {
                    //calcula com base na dimensão
                    if (nTemSabor2) {
                        //cria um sabor temporario para poder colocar dentro da pizza (Sabor sabor1)
                        Sabor sabor1 = new SaborSimples(boxSabor1.getSelectedItem() + "");
                        PizzaTriangular pizza = new PizzaTriangular(valor, sabor1);

                    } else {
                        //tem 2 sabores
                        //cria um sabor temporario para poder colocar dentro da pizza (Sabor sabor1 e Sabor sabor2)
                        Sabor sabor1 = new SaborSimples(boxSabor1.getSelectedItem() + "");
                        Sabor sabor2 = new SaborSimples(boxSabor2.getSelectedItem() + "");
                        PizzaTriangular pizza = new PizzaTriangular(valor, sabor1, sabor2);
                    }

                } else {
                    System.out.println("DEU ERRO NA PIZZA TRIANGULAR");
                }
                break;
            default:
                JOptionPane.showMessageDialog(null, "SELECIONE UM FORMATO.\n", "SELECIONE FORMATO", JOptionPane.INFORMATION_MESSAGE);
        }


    }//GEN-LAST:event_btnCalcularActionPerformed

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        // TODO add your handling code here:
        // Inserir pizza no pedido
        //pegar todos os valores que pizza precisa

        String tipo1 = boxTipos1.getSelectedItem() + "";
        String tipo2 = boxTipos2.getSelectedItem() + "";
        String forma = boxForma.getSelectedItem() + "";
        String sValor = txtAreaDimensao.getText();

        String Sabor2 = boxSabor2.getSelectedItem() + ""; // apenas para validação se tem dois sabores ou nao

        boolean nTemSabor2;
        String saber2sabor = boxSabor2.getSelectedItem() + "";
        if (boxSabor2.getSelectedItem() == null) {
            nTemSabor2 = true;
        } else {
            nTemSabor2 = false;
        }

        //valorDimensaoArea da pizza
        double valor = 0;
        try {
            valor = Double.parseDouble(sValor);

            //Inserir pizza no pedido
            switch (forma) {
                case "Quadrada":
                    if (btnArea.isSelected()) {
                        //calcula com base na área
                        //nao tiver 2 sabores
                        if (nTemSabor2) {
                            int indexSabor1 = boxSabor1.getSelectedIndex();
                            int indexTipo1 = boxTipos1.getSelectedIndex();
                      
                            if (indexTipo1 == 0) {
                                Sabor sabor1 = saboresSimples.get(indexSabor1);
                                PizzaQuadrada pizza = new PizzaQuadrada(valor, sabor1, true);
                                // pegando o cliente para adicionar a pizza no pedido dele
                                Cliente c = this.clienteEscolhido;
                                c.Pedido.addPizza(pizza);
                                this.TabelaModelPizzas.setListaPizzas(c.Pedido.getListPizza());

                            } else if (indexTipo1 == 1) {
                                Sabor sabor1 = saboresEspecial.get(indexSabor1);
                                PizzaQuadrada pizza = new PizzaQuadrada(valor, sabor1, true);
                                // pegando o cliente para adicionar a pizza no pedido dele
                                Cliente c = this.clienteEscolhido;
                                c.Pedido.addPizza(pizza);
                                this.TabelaModelPizzas.setListaPizzas(c.Pedido.getListPizza());

                            } else if (indexTipo1 == 2) {
                                Sabor sabor1 = saboresPremium.get(indexSabor1);
                                PizzaQuadrada pizza = new PizzaQuadrada(valor, sabor1, true);
                                // pegando o cliente para adicionar a pizza no pedido dele
                                Cliente c = this.clienteEscolhido;
                                c.Pedido.addPizza(pizza);
                                this.TabelaModelPizzas.setListaPizzas(c.Pedido.getListPizza());

                            }

                        } else {
                            //tem 2 sabores
                           int indexSabor1 = boxSabor1.getSelectedIndex();
                            int indexTipo1 = boxTipos1.getSelectedIndex();
                            int indexSabor2 = boxSabor2.getSelectedIndex();
                            int indexTipo2 = boxTipos2.getSelectedIndex();
                            
                            
                            if (indexTipo1 == 0) {
                                Sabor sabor1 = saboresSimples.get(indexSabor1);
                                Sabor sabor2 = saboresSimples.get(indexSabor2);
                                PizzaQuadrada pizza = new PizzaQuadrada(valor, sabor1, true);
                                // pegando o cliente para adicionar a pizza no pedido dele
                                Cliente c = this.clienteEscolhido;
                                c.Pedido.addPizza(pizza);
                                this.TabelaModelPizzas.setListaPizzas(c.Pedido.getListPizza());

                            } else if (indexTipo1 == 1) {
                                Sabor sabor1 = saboresEspecial.get(indexSabor1);
                                PizzaQuadrada pizza = new PizzaQuadrada(valor, sabor1, true);
                                // pegando o cliente para adicionar a pizza no pedido dele
                                Cliente c = this.clienteEscolhido;
                                c.Pedido.addPizza(pizza);
                                this.TabelaModelPizzas.setListaPizzas(c.Pedido.getListPizza());

                            } else if (indexTipo1 == 2) {
                                Sabor sabor1 = saboresPremium.get(indexSabor1);
                                PizzaQuadrada pizza = new PizzaQuadrada(valor, sabor1, true);
                                // pegando o cliente para adicionar a pizza no pedido dele
                                Cliente c = this.clienteEscolhido;
                                c.Pedido.addPizza(pizza);
                                this.TabelaModelPizzas.setListaPizzas(c.Pedido.getListPizza());

                            }
                        }
                    } else if (btnDimensao.isSelected()) {
                        //calcula com base na dimensão
                        if (nTemSabor2) {
                            //cria um sabor temporario para poder colocar dentro da pizza (Sabor sabor1)
                            Sabor sabor1 = new SaborSimples(boxSabor1.getSelectedItem() + "");
                            PizzaQuadrada pizza = new PizzaQuadrada(valor, sabor1);
                            // pegando o cliente para adicionar a pizza no pedido dele
                            Cliente c = this.clienteEscolhido;
                            c.Pedido.addPizza(pizza);
                            this.TabelaModelPizzas.setListaPizzas(c.Pedido.getListPizza());
                        } else {
                            //tem 2 sabores
                            //cria um sabor temporario para poder colocar dentro da pizza (Sabor sabor1 e Sabor sabor2)
                            Sabor sabor1 = new SaborSimples(boxSabor1.getSelectedItem() + "");
                            Sabor sabor2 = new SaborSimples(boxSabor2.getSelectedItem() + "");
                            PizzaQuadrada pizza = new PizzaQuadrada(valor, sabor1, sabor2);
                            // pegando o cliente para adicionar a pizza no pedido dele
                            Cliente c = this.clienteEscolhido;
                            c.Pedido.addPizza(pizza);
                            this.TabelaModelPizzas.setListaPizzas(c.Pedido.getListPizza());
                        }
                    } else {
                        System.out.println("DEU ERRO NA PIZZA QUADRADA");
                    }
                    break;
                case "Circular":
                    if (btnArea.isSelected()) {
                        //calcula com base na área
                        if (nTemSabor2) {
                            //cria um sabor temporario para poder colocar dentro da pizza (Sabor sabor1)
                            Sabor sabor1 = new SaborSimples(boxSabor1.getSelectedItem() + "");
                            PizzaRedonda pizza = new PizzaRedonda(valor, sabor1, true);
                            // pegando o cliente para adicionar a pizza no pedido dele
                            Cliente c = this.clienteEscolhido;
                            c.Pedido.addPizza(pizza);
                            this.TabelaModelPizzas.setListaPizzas(c.Pedido.getListPizza());
                        } else {
                            //tem 2 sabores
                            //cria um sabor temporario para poder colocar dentro da pizza (Sabor sabor1 e Sabor sabor2)
                            Sabor sabor1 = new SaborSimples(boxSabor1.getSelectedItem() + "");
                            Sabor sabor2 = new SaborSimples(boxSabor2.getSelectedItem() + "");
                            PizzaRedonda pizza = new PizzaRedonda(valor, sabor1, sabor2, true);
                            // pegando o cliente para adicionar a pizza no pedido dele
                            Cliente c = this.clienteEscolhido;
                            c.Pedido.addPizza(pizza);
                            this.TabelaModelPizzas.setListaPizzas(c.Pedido.getListPizza());
                        }
                    } else if (btnDimensao.isSelected()) {
                        //calcula com base na dimensão
                        if (nTemSabor2) {
                            //cria um sabor temporario para poder colocar dentro da pizza (Sabor sabor1)
                            Sabor sabor1 = new SaborSimples(boxSabor1.getSelectedItem() + "");
                            PizzaRedonda pizza = new PizzaRedonda(valor, sabor1);
                            // pegando o cliente para adicionar a pizza no pedido dele
                            Cliente c = this.clienteEscolhido;
                            c.Pedido.addPizza(pizza);
                            this.TabelaModelPizzas.setListaPizzas(c.Pedido.getListPizza());
                        } else {
                            //tem 2 sabores
                            //cria um sabor temporario para poder colocar dentro da pizza (Sabor sabor1 e Sabor sabor2)
                            Sabor sabor1 = new SaborSimples(boxSabor1.getSelectedItem() + "");
                            Sabor sabor2 = new SaborSimples(boxSabor2.getSelectedItem() + "");
                            PizzaRedonda pizza = new PizzaRedonda(valor, sabor1, sabor2);
                            // pegando o cliente para adicionar a pizza no pedido dele
                            Cliente c = this.clienteEscolhido;
                            c.Pedido.addPizza(pizza);
                            this.TabelaModelPizzas.setListaPizzas(c.Pedido.getListPizza());
                        }
                    } else {
                        System.out.println("DEU ERRO NA PIZZA CIRCULAR");
                    }
                    break;
                case "Triangular":
                    if (btnArea.isSelected()) {
                        //calcula com base na área
                        if (nTemSabor2) {
                            //cria um sabor temporario para poder colocar dentro da pizza (Sabor sabor1)
                            Sabor sabor1 = new SaborSimples(boxSabor1.getSelectedItem() + "");
                            PizzaTriangular pizza = new PizzaTriangular(valor, sabor1, true);
                            // pegando o cliente para adicionar a pizza no pedido dele
                            Cliente c = this.clienteEscolhido;
                            c.Pedido.addPizza(pizza);
                            this.TabelaModelPizzas.setListaPizzas(c.Pedido.getListPizza());
                        } else {
                            //tem 2 sabores
                            //cria um sabor temporario para poder colocar dentro da pizza (Sabor sabor1 e Sabor sabor2)
                            Sabor sabor1 = new SaborSimples(boxSabor1.getSelectedItem() + "");
                            Sabor sabor2 = new SaborSimples(boxSabor2.getSelectedItem() + "");
                            PizzaTriangular pizza = new PizzaTriangular(valor, sabor1, sabor2, true);
                            // pegando o cliente para adicionar a pizza no pedido dele
                            Cliente c = this.clienteEscolhido;
                            c.Pedido.addPizza(pizza);
                            this.TabelaModelPizzas.setListaPizzas(c.Pedido.getListPizza());
                        }
                    } else if (btnDimensao.isSelected()) {
                        //calcula com base na dimensão
                        if (nTemSabor2) {
                            //cria um sabor temporario para poder colocar dentro da pizza (Sabor sabor1)
                            Sabor sabor1 = new SaborSimples(boxSabor1.getSelectedItem() + "");
                            PizzaTriangular pizza = new PizzaTriangular(valor, sabor1);
                            // pegando o cliente para adicionar a pizza no pedido dele
                            Cliente c = this.clienteEscolhido;
                            c.Pedido.addPizza(pizza);
                            this.TabelaModelPizzas.setListaPizzas(c.Pedido.getListPizza());
                        } else {
                            //tem 2 sabores
                            //cria um sabor temporario para poder colocar dentro da pizza (Sabor sabor1 e Sabor sabor2)
                            Sabor sabor1 = new SaborSimples(boxSabor1.getSelectedItem() + "");
                            Sabor sabor2 = new SaborSimples(boxSabor2.getSelectedItem() + "");
                            PizzaTriangular pizza = new PizzaTriangular(valor, sabor1, sabor2);
                            // pegando o cliente para adicionar a pizza no pedido dele
                            Cliente c = this.clienteEscolhido;
                            c.Pedido.addPizza(pizza);
                            this.TabelaModelPizzas.setListaPizzas(c.Pedido.getListPizza());
                        }

                    } else {
                        System.out.println("DEU ERRO NA PIZZA TRIANGULAR");
                    }
                    break;
                default:
                    JOptionPane.showMessageDialog(null, "SELECIONE UM FORMATO.\n", "SELECIONE FORMATO", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (java.lang.NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Insira um valor válido numérico.\n", "VALOR VÁLIDO", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        //remover pizza selecionada
        if (this.pizzaSelecionada != null) {
            Cliente c = this.clienteEscolhido;
            c.Pedido.getListPizza().remove(this.linhaClicadaParaRemoção);
            this.TabelaModelPizzas.setListaPizzas(c.Pedido.getListPizza());

        } else {
            JOptionPane.showMessageDialog(null, "SELECIONE UMA PIZZA PRIMEIRO.\n", "SELECIONE PIZZA", JOptionPane.INFORMATION_MESSAGE);

        }


    }//GEN-LAST:event_btnRemoverActionPerformed

    private void tablePizzasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePizzasMouseClicked
        //selecionar pizza clicada para remoção
        this.linhaClicadaParaRemoção = this.tablePizzas.rowAtPoint(evt.getPoint());

    }//GEN-LAST:event_tablePizzasMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(telaFazerPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(telaFazerPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(telaFazerPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(telaFazerPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new telaFazerPedido().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxForma;
    private javax.swing.JComboBox<String> boxSabor1;
    private javax.swing.JComboBox<String> boxSabor2;
    private javax.swing.JComboBox<String> boxStatus;
    private javax.swing.JComboBox<String> boxTipos1;
    private javax.swing.JComboBox<String> boxTipos2;
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JRadioButton btnArea;
    private javax.swing.JButton btnCalcular;
    private javax.swing.JRadioButton btnDimensao;
    private javax.swing.JButton btnRemover;
    private javax.swing.JButton btnSair;
    private javax.swing.ButtonGroup grupoBotao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelCliente;
    private javax.swing.JLabel labelId;
    private javax.swing.JLabel labelValorTotal;
    private javax.swing.JTable tablePizzas;
    private javax.swing.JTextField txtAreaDimensao;
    // End of variables declaration//GEN-END:variables

    void setCliente(Cliente c) {
        this.clienteEscolhido = c;
    }
}
